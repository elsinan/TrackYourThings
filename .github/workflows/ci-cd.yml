name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository_owner }}/trackyourthings/backend
  IMAGE_NAME_FRONTEND: ${{ github.repository_owner }}/trackyourthings/frontend

jobs:
  # Backend Tests and Build
  backend-tests:
    runs-on: ubuntu-latest
    name: Backend Tests

    steps:
    - uses: actions/checkout@v4

    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: '8.0.x'

    - name: Cache NuGet packages
      uses: actions/cache@v4
      with:
        path: ~/.nuget/packages
        key: ${{ runner.os }}-nuget-${{ hashFiles('**/packages.lock.json') }}
        restore-keys: |
          ${{ runner.os }}-nuget-

    - name: Restore dependencies
      run: dotnet restore
      working-directory: ./backend

    - name: Build
      run: dotnet build --no-restore --configuration Release
      working-directory: ./backend

    - name: Test
      run: dotnet test --no-build --configuration Release --verbosity normal
      working-directory: ./backend


  # Frontend Tests and Build
  frontend-tests:
    runs-on: ubuntu-latest
    name: Frontend Tests

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'yarn'
        cache-dependency-path: './frontend/yarn.lock'

    - name: Enable Corepack
      run: corepack enable

    - name: Install dependencies
      run: yarn install --frozen-lockfile
      working-directory: ./frontend

    - name: Lint
      run: yarn lint
      working-directory: ./frontend

    - name: Type check
      run: yarn type-check
      working-directory: ./frontend

    - name: Test
      run: yarn test:unit
      working-directory: ./frontend

    - name: Build
      run: yarn build
      working-directory: ./frontend

  # Build and push Docker images
  build-and-push:
    needs: [backend-tests, frontend-tests]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata for backend
      id: meta-backend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Extract metadata for frontend
      id: meta-frontend
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push backend image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        file: ./backend/Dockerfile
        push: true
        tags: ${{ steps.meta-backend.outputs.tags }}
        labels: ${{ steps.meta-backend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Build and push frontend image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        file: ./frontend/Dockerfile
        push: true
        tags: ${{ steps.meta-frontend.outputs.tags }}
        labels: ${{ steps.meta-frontend.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
  
  deploy:
    needs: [build-and-push]
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: Delete existing backend container (if exists)
      run: |
        az container delete \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name trackyourthings-backend \
          --yes || true

    - name: Delete existing frontend container (if exists)
      run: |
        az container delete \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name trackyourthings-frontend \
          --yes || true

    - name: Deploy Backend to ACI
      run: |
        az container create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name trackyourthings-backend \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest \
          --location polandcentral \
          --os-type Linux
          --dns-name-label trackyourthings-backend \
          --ports 8080 \
          --environment-variables \
            TYT_DB_HOST=${{ secrets.AZURE_DB_SERVER_NAME }}.postgres.database.azure.com \
            TYT_DB_PORT=5432 \
            TYT_DB_USER=postgres \
            TYT_DB_PASSWORD=${{ secrets.AZURE_DB_PASSWORD }} \
            TYT_DB_NAME=trackyourthings \
            ASPNETCORE_ENVIRONMENT=Production \
            ASPNETCORE_URLS=http://+:8080 \
          --registry-login-server ${{ env.REGISTRY }} \
          --registry-username ${{ github.actor }} \
          --registry-password ${{ secrets.GITHUB_TOKEN }} \
          --cpu 1 \
          --memory 2 \
          --restart-policy Always

    - name: Wait for backend to be ready
      run: |
        echo "Waiting for backend to start..."
        sleep 60
        
        BACKEND_URL="http://trackyourthings-backend.polandcentral.azurecontainer.io:8080"
        
        for i in {1..10}; do
          if curl -f "$BACKEND_URL/health" > /dev/null 2>&1; then
            echo "Backend is healthy!"
            break
          else
            echo "Backend not ready yet, waiting... ($i/10)"
            sleep 30
          fi
        done

    - name: Deploy Frontend to ACI
      run: |
        # Get backend URL for frontend configuration
        BACKEND_URL="http://trackyourthings-backend.polandcentral.azurecontainer.io:8080"
        
        az container create \
          --resource-group ${{ secrets.AZURE_RESOURCE_GROUP }} \
          --name trackyourthings-frontend \
          --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_FRONTEND }}:latest \
          --dns-name-label trackyourthings-frontend \
          --location polandcentral \
          --os-type Linux
          --ports 80 \
          --environment-variables \
            VITE_API_URL=$BACKEND_URL \
          --registry-login-server ${{ env.REGISTRY }} \
          --registry-username ${{ github.actor }} \
          --registry-password ${{ secrets.GITHUB_TOKEN }} \
          --cpu 0.5 \
          --memory 1 \
          --restart-policy Always

    - name: Test deployment
      run: |
        echo "Testing deployment..."
        
        BACKEND_URL="http://trackyourthings-backend.polandcentral.azurecontainer.io:8080"
        FRONTEND_URL="http://trackyourthings-frontend.polandcentral.azurecontainer.io"
        
        

